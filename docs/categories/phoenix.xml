<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Lobotomy (Posts about phoenix)</title><link>https://parisni.github.io/weblog</link><description></description><atom:link href="https://parisni.github.io/weblog/categories/phoenix.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:nicolas.paris@riseup.net"&gt;Parisni&lt;/a&gt; </copyright><lastBuildDate>Sun, 11 Nov 2018 16:53:24 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Hbase Reflexions</title><link>https://parisni.github.io/weblog/posts/hbase-reflexion/</link><dc:creator>Nicolas Paris</dc:creator><description>&lt;div&gt;&lt;p&gt;hbase looks a powerfull tool in complement of hive. While hive suits well
for ETL and data historisation, it cannot offer sub-second access to thousand
of concurrent users.&lt;/p&gt;
&lt;p&gt;Hbase comes with a powerful compagnion aka Phoenix that provides many features,
while keeping the hbase features intact. Phoenix provides a jdbc driver to
hbase. This distinction adds many improvements:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;it offers sql, joins, secondary indexes, transactions, sequences on top of hbase.&lt;/li&gt;
&lt;li&gt;it simplifies hive, spark, solr, and general programming access to hbase
data.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="jdbc-overview"&gt;
&lt;h2&gt;JDBC overview&lt;/h2&gt;
&lt;p&gt;jdbc access can be done with &lt;a class="reference external" href="https://community.hortonworks.com/questions/47138/phoenix-query-server-connection-url-example.html"&gt;kerberos&lt;/a&gt; on the form&lt;/p&gt;
&lt;pre class="code java"&gt;&lt;a name="rest_code_7c56e3310b794c078f407b3502eeed2d-1"&gt;&lt;/a&gt;&lt;span class="s"&gt;"jdbc:phoenix:thin:url=&amp;lt;scheme&amp;gt;://&amp;lt;server-hostname&amp;gt;:&amp;lt;port&amp;gt;;authentication=SPNEGO;principal=my_user;keytab=/home/my_user/my_user.keytab"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Phoenix connection thought JDBC needs :
- a jdbc jar file
- the hbase-site.conf
- a kerberos ticket&lt;/p&gt;
&lt;p&gt;Phoenix does not provide a way for connection pooling. The costly part of the
connection is the hbase link. However it is cached within the region servers
and a new phoenix jdbc connection can be rebuild for every query since it is a
lightweight object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hive-integration"&gt;
&lt;h2&gt;Hive integration&lt;/h2&gt;
&lt;p&gt;Phoenix tables can be mounted into hive thanks to a &lt;a class="reference external" href="https://phoenix.apache.org/hive_storage_handler.html"&gt;recent plugin&lt;/a&gt;. In
comparaison to hbase plugin, this allows fast join to hive table (to be
tested). While this plugin needs phoenix 4.8.0+ HDP ships with phoenix 4.7.0.
However HDP Phoenix is a fork of Phoenix, and it integrates this feature.&lt;/p&gt;
&lt;p&gt;Because phoenix allows to mount a hbase table, hive a phoenix or a hbase table,
there is many ways to make hive querying hbase. Moreover hive can create a
regular table stored as a hbase or phoenix table wich is slightly different.
The best way is to mount phoenix as a hive external table. First advantage is
&lt;em&gt;phoenix&lt;/em&gt; allows salted tables by mean there is no need to manually handle the
key to be well distributed. Second, is loading directly into &lt;em&gt;phoenix&lt;/em&gt; allows
it to manage its secondary indexes and also some other tools such &lt;em&gt;solr&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, hive can access an external &lt;em&gt;phoenix&lt;/em&gt; table and allow both upsert and
select. The plugin also provides a way to delete/update from hive, however I
haven't been able to reproduce yet since transactional tables are only
compatible with orc based tables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spark-integration"&gt;
&lt;h2&gt;Spark integration&lt;/h2&gt;
&lt;p&gt;Spark can read and write from phoenix &lt;a class="reference external" href="https://stackoverflow.com/questions/40329968/apache-spark-ways-to-read-and-write-from-apache-phoenix-in-java"&gt;here on SOF&lt;/a&gt; or &lt;a class="reference external" href="https://phoenix.apache.org/phoenix_spark.html"&gt;here on official&lt;/a&gt;. The good point is it can be done from scala or python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solr-integration"&gt;
&lt;h2&gt;Solr integration&lt;/h2&gt;
&lt;p&gt;Solr integration with hbase is a good idea: hbase contains the truth and solr allows fast lookup to discover it. However, setting up solr on top of hbase is a pain. Phoenix simplifies drastically that :
&lt;a class="reference external" href="https://nicholasmaillard.wordpress.com/2014/12/27/phoenix-to-solr-in-20-minutes/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hive</category><category>phoenix</category><category>solr</category><category>spark</category><guid>https://parisni.github.io/weblog/posts/hbase-reflexion/</guid><pubDate>Sat, 12 May 2018 22:00:00 GMT</pubDate></item></channel></rss>