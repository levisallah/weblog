<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Lobotomy</title><link>https://parisni.github.io/weblog/</link><description></description><atom:link href="https://parisni.github.io/weblog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:nicolas.paris@riseup.net"&gt;Parisni&lt;/a&gt; </copyright><lastBuildDate>Sun, 31 Mar 2019 12:29:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Concatenating pdf</title><link>https://parisni.github.io/weblog/posts/concatenating-pdf/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;The command below is great to concat multiple pdf together. I had some problem with pdftk.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9b2e765545184e698e46dbef1aa40007-1"&gt;&lt;/a&gt;gs -dBATCH -dNOPAUSE -q -sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite -sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;merged.pdf mine1.pdf mine2.pdf
&lt;/pre&gt;&lt;p&gt;Also this command allows to compress a large pdf into something smaller:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_710c765c493a4041ba99e74cdd2b0c91-1"&gt;&lt;/a&gt;gs -sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite -dCompatibilityLevel&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.4 -dPDFSETTINGS&lt;span class="o"&gt;=&lt;/span&gt;/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -r150 -sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;output.pdf input.pdf
&lt;/pre&gt;&lt;p&gt;It is also possible to split pdf with pdfbox:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0a8710ac6daa46b5985c58e3e322d9de-1"&gt;&lt;/a&gt;java -jar /app/edsr/script/java/pdfbox-app-2.0.0-SNAPSHOT.jar PDFSplit ./authorisation-inscription.pdf
&lt;/pre&gt;&lt;/div&gt;</description><category>pdf</category><guid>https://parisni.github.io/weblog/posts/concatenating-pdf/</guid><pubDate>Mon, 17 Dec 2018 13:48:34 GMT</pubDate></item><item><title>PySpark Considerations</title><link>https://parisni.github.io/weblog/posts/pyspark-considerations/</link><dc:creator>Parisni</dc:creator><description>&lt;div class="section" id="extracting-raw-data-from-hdfs"&gt;
&lt;h2&gt;Extracting raw data from hdfs&lt;/h2&gt;
&lt;p&gt;I have tested multiple ways to get data from hdfs. There is two situations:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/pyspark-considerations/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>spark</category><guid>https://parisni.github.io/weblog/posts/pyspark-considerations/</guid><pubDate>Thu, 22 Nov 2018 22:05:23 GMT</pubDate></item><item><title>Jupyter Notebooks and Conda</title><link>https://parisni.github.io/weblog/posts/jupyter-notebooks-and-conda/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;After creating a environment with conda and installing packages, the jupyter
notebook environment may not see them. The method below adds a new kernel based
on the later environment and allow to benefit from conda:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b577289613a24759b40fa5f1366ed535-1"&gt;&lt;/a&gt;conda activate my-env
&lt;a name="rest_code_b577289613a24759b40fa5f1366ed535-2"&gt;&lt;/a&gt;conda  create -n my-env pip setuptools ipykernel &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5
&lt;a name="rest_code_b577289613a24759b40fa5f1366ed535-3"&gt;&lt;/a&gt;python -m ipykernel install --user --name my-env --display-name &lt;span class="s2"&gt;"Python (my-env)"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>jupyter</category><category>python</category><guid>https://parisni.github.io/weblog/posts/jupyter-notebooks-and-conda/</guid><pubDate>Fri, 16 Nov 2018 18:11:17 GMT</pubDate></item><item><title>Loading Postgres from Sqoop</title><link>https://parisni.github.io/weblog/posts/loading-postgres-from-sqoop/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;PostgreSQL and Hadoop are complementary technologies. PostgreSQL outperforms
Hadoop to retrieve small amount of information from multiple tables. Hadoop
outperforms PostgreSQL to transform multiple tables into simplfied and
aggregated tables. So, how to load PostgreSQL efficiently from Hadoop ?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/loading-postgres-from-sqoop/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>big-data</category><category>hadoop</category><category>postgresql</category><category>sqoop</category><guid>https://parisni.github.io/weblog/posts/loading-postgres-from-sqoop/</guid><pubDate>Sun, 11 Nov 2018 20:19:55 GMT</pubDate></item><item><title>Deploying Nikola with Githup Pages</title><link>https://parisni.github.io/weblog/posts/deploying-with-githup-pages/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;div class="section" id="the-simple-way"&gt;
&lt;h2&gt;The simple way&lt;/h2&gt;
&lt;p&gt;Its about using the &lt;em&gt;docs&lt;/em&gt; github pages method.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;create a new github repository&lt;/li&gt;
&lt;li&gt;create a &lt;em&gt;/docs/&lt;/em&gt; folder with the website in it&lt;/li&gt;
&lt;li&gt;enable github pages and specify the &lt;em&gt;docs&lt;/em&gt; folder as html source&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="why-the-simple-way"&gt;
&lt;h2&gt;Why the simple way&lt;/h2&gt;
&lt;p&gt;The alternate way is to use a &lt;em&gt;gh-pages&lt;/em&gt; branch to store the website. The main problem is the method leads to highly complex deployment method with &lt;a class="reference external" href="http://www.damian.oquanta.info/posts/one-line-deployment-of-your-site-to-gh-pages.html"&gt;git subtree&lt;/a&gt; or &lt;a class="reference external" href="https://www.asmeurer.com/blog/posts/moving-to-github-pages-with-nikola/"&gt;other way&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A second problem is this method make either duplicate website source code, or makes building the website for each post.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><category>python</category><guid>https://parisni.github.io/weblog/posts/deploying-with-githup-pages/</guid><pubDate>Sun, 11 Nov 2018 17:07:33 GMT</pubDate></item><item><title>A decent python configuration</title><link>https://parisni.github.io/weblog/posts/a-decent-python-configuration/</link><dc:creator>Parisni</dc:creator><description>&lt;div class="section" id="use-anaconda"&gt;
&lt;h2&gt;Use Anaconda&lt;/h2&gt;
&lt;p&gt;Anaconda allows to have multiple python versions. This is much easier than using &lt;em&gt;virtualenv&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/a-decent-python-configuration/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>https://parisni.github.io/weblog/posts/a-decent-python-configuration/</guid><pubDate>Sun, 11 Nov 2018 10:43:34 GMT</pubDate></item><item><title>Postgresql 11 on Archlinux</title><link>https://parisni.github.io/weblog/posts/archlinux-pgsql-11/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;I am fairly new to archlinux. Postgresql 11 is fairly new too. Here are the steps to install that version.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/archlinux-pgsql-11/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>archlinux</category><category>postgresql</category><guid>https://parisni.github.io/weblog/posts/archlinux-pgsql-11/</guid><pubDate>Fri, 26 Oct 2018 22:00:00 GMT</pubDate></item><item><title>Hive llap resource consumption</title><link>https://parisni.github.io/weblog/posts/hive-llap-resources/</link><dc:creator>Parisni</dc:creator><description>&lt;div class="section" id="resource-consumption"&gt;
&lt;h2&gt;Resource consumption&lt;/h2&gt;
&lt;p&gt;Hive llap is quite complicated to tune.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/hive-llap-resources/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>big-data</category><category>hive</category><guid>https://parisni.github.io/weblog/posts/hive-llap-resources/</guid><pubDate>Thu, 06 Sep 2018 22:00:00 GMT</pubDate></item><item><title>Email Best Practices</title><link>https://parisni.github.io/weblog/posts/email-best-practice/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;I will post here all best practices about writing emails. A lot of useful
information can be found &lt;a class="reference external" href="https://www.ietf.org/rfc/rfc3676.txt"&gt;there&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/email-best-practice/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>archlinux</category><category>postgresql</category><guid>https://parisni.github.io/weblog/posts/email-best-practice/</guid><pubDate>Sun, 02 Sep 2018 22:00:00 GMT</pubDate></item><item><title>Spelling, mutt &amp; vim</title><link>https://parisni.github.io/weblog/posts/mutt-vim/</link><dc:creator>Parisni</dc:creator><description>&lt;div&gt;&lt;p&gt;Having a correct spelling is important in society. This is true specially when
come time to write emails.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://parisni.github.io/weblog/posts/mutt-vim/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>email</category><category>mutt</category><category>vim</category><guid>https://parisni.github.io/weblog/posts/mutt-vim/</guid><pubDate>Sun, 02 Sep 2018 22:00:00 GMT</pubDate></item></channel></rss>